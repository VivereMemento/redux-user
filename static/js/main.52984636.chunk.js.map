{"version":3,"sources":["redux-utils/reducers.js","redux-utils/actions.js","User/store.js","store.js","User/UserContent.js","middleware/thunk-fetch.js","User/User.js","App.js","serviceWorker.js","index.js"],"names":["intialState","reducers","action","type","Object","assign","payload","usersList","state","_ref","user","userInfo","isLoading","objectSpread","loading","loaded","_createReducer","defineProperty","arguments","length","undefined","reducer","callReducer","combineReducers","logger","createLogger","store","createStore","composeWithDevTools","applyMiddleware","thunk","UserContent","_this$props","this","props","match","message","react_default","a","createElement","style","color","params","login","className","width","textAlign","src","avatar_url","alt","name","company","location","public_repos","following","followers","thuckFetch","concat","Component","connect","url","dispatch","fetch","then","res","json","User","Route","path","render","User_UserContent","App","BrowserRouter","basename","src_User_User","Boolean","window","hostname","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52984636.chunk.js","sourcesContent":["const callReducer = (reducer, state, action) => (\r\n  typeof reducer === 'function'\r\n    ? reducer(state, action)\r\n    : state\r\n);\r\n\r\nexport const createReducer = (intialState, reducers) => (\r\n  (state = intialState, action) => callReducer(\r\n    reducers[action.type], state, action\r\n  )\r\n);\r\n\r\n\r\nexport const usersList = (state, { payload }) => {\r\n  const user = payload.userInfo;\r\n  const isLoading = payload.isLoading;\r\n  \r\n  return {...state, user: user, loading: isLoading}\r\n};\r\n","export const action = type => Object.assign(\r\n  payload => ({ type, payload }),\r\n  { type }\r\n);\r\n\r\n","import {\r\n\taction,\r\n  createReducer,\r\n  usersList,\r\n} from '../redux-utils';\r\n\r\nexport const isLoading = action('USER:LOADING');\r\nexport const loaded = action('LOADED');\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  user: {},\r\n};\r\nexport const user = createReducer(initialState, {\r\n  [isLoading.type]: usersList,\r\n  [loaded.type]: usersList,\r\n});\r\n\r\n// ------- SELECTORS --------\r\nconst createSelector = (...selectors) => {\r\n  const selector = selectors.pop();\r\n  return (...args) => {\r\n    return selector(\r\n      ...selectors.map(s => s(...args))\r\n    );\r\n  }\r\n}\r\n\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport { user } from './User/store';\r\n\r\nconst reducer = combineReducers({\r\n\tuser,\r\n});\r\n\r\nconst logger = createLogger();\r\n\r\nexport const store = createStore(\r\n\treducer,\r\n\tcomposeWithDevTools(applyMiddleware(thunk, logger))\r\n)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport thuckFetch from '../middleware/thunk-fetch';\r\nclass UserContent extends Component {\r\n\r\n\trender() {\r\n\t\tconst { user, loading, match } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\tloading\r\n\t\t\t\t? '...Loading' :\r\n\t\t\tuser.message\r\n\t\t\t\t? <h1>Sorry, the user <span style={{color: 'red'}}>{match.params.login}</span> { user.message }</h1>\r\n\t\t\t\t: <div className=\"card\" style={{width: \"18rem\", textAlign: 'left'}}>\r\n\t\t\t\t\t\t<img className=\"card-img-top\" src={ user.avatar_url } alt=\"Card cap\" />\r\n\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t<h5>{ user.login }</h5>\r\n\t\t\t\t\t\t\t<h6>{ user.name }</h6>\r\n\t\t\t\t\t\t\t<p>{ user.company }</p>\r\n\t\t\t\t\t\t\t<p>{ user.location }</p>\r\n\t\t\t\t\t\t\t<h6>Statistics:</h6>\r\n\t\t\t\t\t\t\t<p>Repositories: { user.public_repos }</p>\r\n\t\t\t\t\t\t\t<p>Following: { user.following }</p>\r\n\t\t\t\t\t\t\t<p>Followers: { user.followers }</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t)\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.thuckFetch(`https://api.github.com/users/${this.props.match.params.login}`)\r\n\t}\r\n}\r\n \r\nexport default connect(\r\n\tstate => ({...state.user}),\r\n\t{ thuckFetch }\r\n)(UserContent);","import { isLoading, loaded } from '../User/store';\r\nexport default url => {\r\n\treturn dispatch => {\r\n\t\tdispatch(isLoading({isLoading: true}));\r\n\t\r\n\t\tfetch(url)\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => dispatch(loaded({userInfo: res, isLoading: false})))\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport UserContent from './UserContent';\r\n\r\nclass User extends Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Route path=\"/redux-user/:login\" render={ props => <UserContent {...props} />} />\r\n\t\t)\r\n\t}\r\n}\r\n \r\nexport default User;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport './App.css';\r\nimport User from './User/User';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router basename=\"/\">\r\n        <div className=\"App\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-4\">\r\n                <User />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { store } from './store';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n\t<Provider store={ store }>\r\n\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}