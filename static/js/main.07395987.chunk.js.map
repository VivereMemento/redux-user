{"version":3,"sources":["redux-utils/reducers.js","redux-utils/actions.js","User/store.js","store.js","User/User.js","middleware/thunk-fetch.js","App.js","serviceWorker.js","index.js"],"names":["intialState","reducers","action","type","Object","assign","payload","usersList","state","_ref","user","userInfo","isLoading","objectSpread","loading","loaded","_createReducer","defineProperty","arguments","length","undefined","reducer","callReducer","combineReducers","logger","createLogger","store","createStore","composeWithDevTools","applyMiddleware","thunk","User","_this$props","this","props","match","message","react_default","a","createElement","style","color","params","login","className","width","textAlign","src","avatar_url","alt","name","company","location","public_repos","following","followers","thuckFetch","concat","Component","connect","url","dispatch","fetch","then","res","json","App","BrowserRouter","Route","exact","path","render","src_User_User","Boolean","window","hostname","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07395987.chunk.js","sourcesContent":["const callReducer = (reducer, state, action) => (\r\n  typeof reducer === 'function'\r\n    ? reducer(state, action)\r\n    : state\r\n);\r\n\r\nexport const createReducer = (intialState, reducers) => (\r\n  (state = intialState, action) => callReducer(\r\n    reducers[action.type], state, action\r\n  )\r\n);\r\n\r\n\r\nexport const usersList = (state, { payload }) => {\r\n  const user = payload.userInfo;\r\n  const isLoading = payload.isLoading;\r\n  \r\n  return {...state, user: user, loading: isLoading}\r\n};\r\n","export const action = type => Object.assign(\r\n  payload => ({ type, payload }),\r\n  { type }\r\n);\r\n\r\n","import {\r\n\taction,\r\n  createReducer,\r\n  usersList,\r\n} from '../redux-utils';\r\n\r\nexport const isLoading = action('USER:LOADING');\r\nexport const loaded = action('LOADED');\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  user: {},\r\n};\r\nexport const user = createReducer(initialState, {\r\n  [isLoading.type]: usersList,\r\n  [loaded.type]: usersList,\r\n});\r\n\r\n// ------- SELECTORS --------\r\nconst createSelector = (...selectors) => {\r\n  const selector = selectors.pop();\r\n  return (...args) => {\r\n    return selector(\r\n      ...selectors.map(s => s(...args))\r\n    );\r\n  }\r\n}\r\n\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport { user } from './User/store';\r\n\r\nconst reducer = combineReducers({\r\n\tuser,\r\n});\r\n\r\nconst logger = createLogger();\r\n\r\nexport const store = createStore(\r\n\treducer,\r\n\tcomposeWithDevTools(applyMiddleware(thunk, logger))\r\n)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport thuckFetch from '../middleware/thunk-fetch';\r\nclass User extends Component {\r\n\r\n\trender() {\r\n\t\tconst { user, loading, match } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\tloading\r\n\t\t\t\t? '...Loading' :\r\n\t\t\tuser.message\r\n\t\t\t\t? <h1>Sorry, the user <span style={{color: 'red'}}>{match.params.login}</span> { user.message }</h1>\r\n\t\t\t\t: <div className=\"card\" style={{width: \"18rem\", textAlign: 'left'}}>\r\n\t\t\t\t\t\t<img className=\"card-img-top\" src={ user.avatar_url } alt=\"Card cap\" />\r\n\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t<h5>{ user.login }</h5>\r\n\t\t\t\t\t\t\t<h6>{ user.name }</h6>\r\n\t\t\t\t\t\t\t<p>{ user.company }</p>\r\n\t\t\t\t\t\t\t<p>{ user.location }</p>\r\n\t\t\t\t\t\t\t<h6>Statistics:</h6>\r\n\t\t\t\t\t\t\t<p>Repositories: { user.public_repos }</p>\r\n\t\t\t\t\t\t\t<p>Following: { user.following }</p>\r\n\t\t\t\t\t\t\t<p>Followers: { user.followers }</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t)\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.thuckFetch(`https://api.github.com/users/${this.props.match.params.login}`)\r\n\t}\r\n}\r\n \r\nexport default connect(\r\n\tstate => ({...state.user}),\r\n\t{ thuckFetch }\r\n)(User);","import { isLoading, loaded } from '../User/store';\r\nexport default url => {\r\n\treturn dispatch => {\r\n\t\tdispatch(isLoading({isLoading: true}));\r\n\t\r\n\t\tfetch(url)\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => dispatch(loaded({userInfo: res, isLoading: false})))\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport User from './User/User';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-4\">\n                <Route exact path=\"/\" render={() => <h1>Please, enter login you would like to find into the search line</h1>} />\n                <Route path=\"/:login\" render={(props) => <User {...props}/>} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n\t<Provider store={ store }>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}